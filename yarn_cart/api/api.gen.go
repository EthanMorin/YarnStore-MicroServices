// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new cart
	// (POST /cart/new)
	PostCartNew(c *gin.Context)
	// Clear the cart
	// (DELETE /cart/{cart_id})
	DeleteCartCartId(c *gin.Context, cartId string)
	// Returns current Yarns in cart
	// (GET /cart/{cart_id})
	GetCartCartId(c *gin.Context, cartId string)
	// Remove one item in the cart
	// (DELETE /cart/{cart_id}/{product_id})
	DeleteCartCartIdProductId(c *gin.Context, cartId string, productId string)
	// Update the Yarn quantity
	// (PATCH /cart/{cart_id}/{product_id})
	PatchCartCartIdProductId(c *gin.Context, cartId string, productId string)
	// Adds a Yarn to the cart
	// (POST /cart/{cart_id}/{product_id})
	PostCartCartIdProductId(c *gin.Context, cartId string, productId string)
	// Check if the service is running
	// (GET /check)
	GetCheck(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostCartNew operation middleware
func (siw *ServerInterfaceWrapper) PostCartNew(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCartNew(c)
}

// DeleteCartCartId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCartCartId(c *gin.Context) {

	var err error

	// ------------- Path parameter "cart_id" -------------
	var cartId string

	err = runtime.BindStyledParameterWithOptions("simple", "cart_id", c.Param("cart_id"), &cartId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cart_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCartCartId(c, cartId)
}

// GetCartCartId operation middleware
func (siw *ServerInterfaceWrapper) GetCartCartId(c *gin.Context) {

	var err error

	// ------------- Path parameter "cart_id" -------------
	var cartId string

	err = runtime.BindStyledParameterWithOptions("simple", "cart_id", c.Param("cart_id"), &cartId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cart_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCartCartId(c, cartId)
}

// DeleteCartCartIdProductId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCartCartIdProductId(c *gin.Context) {

	var err error

	// ------------- Path parameter "cart_id" -------------
	var cartId string

	err = runtime.BindStyledParameterWithOptions("simple", "cart_id", c.Param("cart_id"), &cartId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cart_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCartCartIdProductId(c, cartId, productId)
}

// PatchCartCartIdProductId operation middleware
func (siw *ServerInterfaceWrapper) PatchCartCartIdProductId(c *gin.Context) {

	var err error

	// ------------- Path parameter "cart_id" -------------
	var cartId string

	err = runtime.BindStyledParameterWithOptions("simple", "cart_id", c.Param("cart_id"), &cartId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cart_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchCartCartIdProductId(c, cartId, productId)
}

// PostCartCartIdProductId operation middleware
func (siw *ServerInterfaceWrapper) PostCartCartIdProductId(c *gin.Context) {

	var err error

	// ------------- Path parameter "cart_id" -------------
	var cartId string

	err = runtime.BindStyledParameterWithOptions("simple", "cart_id", c.Param("cart_id"), &cartId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cart_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCartCartIdProductId(c, cartId, productId)
}

// GetCheck operation middleware
func (siw *ServerInterfaceWrapper) GetCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCheck(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/cart/new", wrapper.PostCartNew)
	router.DELETE(options.BaseURL+"/cart/:cart_id", wrapper.DeleteCartCartId)
	router.GET(options.BaseURL+"/cart/:cart_id", wrapper.GetCartCartId)
	router.DELETE(options.BaseURL+"/cart/:cart_id/:product_id", wrapper.DeleteCartCartIdProductId)
	router.PATCH(options.BaseURL+"/cart/:cart_id/:product_id", wrapper.PatchCartCartIdProductId)
	router.POST(options.BaseURL+"/cart/:cart_id/:product_id", wrapper.PostCartCartIdProductId)
	router.GET(options.BaseURL+"/check", wrapper.GetCheck)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTW8bOQz9KwJ3j7O2s81pbkELFO4hSRv0EBRBIEu0rXRGUiTKgWH4vxfUOP6asesg",
	"DdpDD4YFDUk9Pj6RWoBytXcWLUUoFxDVFGuZl+9lIP73wXkMZDDvKhno3mhejl2oJUEJKRkNBdDcI5QQ",
	"KRg7gWUBhrDOTuvFbqzHJC0ZmvN65Wws4QQDe89lsPzl34BjKOGf/gZpfwWzf8s2y+X6bDd6QEWw2ZAh",
	"yHm3xe0q/i4mOZOmkqMKt0CNnKtQWnbywemkTmYgWUP3ylUubIXb+2xljYe/+mDU9meb6hHz086It4wd",
	"u2xsiDPIOQoupLi4Hor/xJVHy6t3vUFvAAXMMETjLJRwlneWBTiPVnoDJTwbeUnTzE2fi9+3+JRpczHL",
	"g8mTZJwdaijh2kXi8y7xCQoIGL2zsWH2/8FZFpCzhDa7Su8ro7Jz/yE6uxHga3TXzYzGqILx1GSbKVEB",
	"JaEWMSmFMY5TVTVSiamuZZizXTaJQgqLT4Ix8HlyEqH81lyQO3ZoiFmsMC4ZpMYKCdsEfcj77Mq/oc78",
	"BlkjYeCoCzAMkDmHAhptrJNnRh+TCaihpJCw2KJrn4W7Fv3nDa42DxXK8BMe2ETQFA9wUMAEO9TwEelY",
	"ph1YcpJvxsDgRQI81nhy3h3C+nRzdSly0xFuLLiFxT0qvyClYKNQKQS0JPiKRmHsyerqLzZN6EVSu27c",
	"fkMlik5Vb/XSXy7s3PgC1m7WEnYB5wc9rCMxdsnqVtE4knAWBc8yLtexy+AlqWlHc+TtP6QeuyesoAij",
	"WbacWp6+xZuWbfCKcfB2T4f2nf68Okskr1sDo3eioHp7ivqaY2Wqs+E6oS45HR21f8X08rfFCcJoySCX",
	"SWrd2VAG7foP7UxWRgtjfaK96l9ozY+KHJLckV6S2/8U1XeOf3DGZoPu+7WL6QbDzCgUJoqQrH1+L20N",
	"eg4lTFO22GW9XGNcPBexGYZ3yx8BAAD//xkuTiBNDAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
