// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new cart
	// (POST /cart/new)
	PostCartNew(c *gin.Context)
	// Clear the cart
	// (DELETE /cart/{cart_id})
	DeleteCartCartId(c *gin.Context, cartId string)
	// Returns current Yarns in cart
	// (GET /cart/{cart_id})
	GetCartCartId(c *gin.Context, cartId string)
	// Adds a Yarn to the cart
	// (POST /cart/{cart_id})
	PostCartCartId(c *gin.Context, cartId string)
	// Remove one item in the cart
	// (DELETE /cart/{cart_id}/{product_id})
	DeleteCartCartIdProductId(c *gin.Context, cartId string, productId string)
	// Update the Yarn quantity
	// (PATCH /cart/{cart_id}/{product_id})
	PatchCartCartIdProductId(c *gin.Context, cartId string, productId string)
	// Check if the service is running
	// (GET /check)
	GetCheck(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostCartNew operation middleware
func (siw *ServerInterfaceWrapper) PostCartNew(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCartNew(c)
}

// DeleteCartCartId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCartCartId(c *gin.Context) {

	var err error

	// ------------- Path parameter "cart_id" -------------
	var cartId string

	err = runtime.BindStyledParameterWithOptions("simple", "cart_id", c.Param("cart_id"), &cartId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cart_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCartCartId(c, cartId)
}

// GetCartCartId operation middleware
func (siw *ServerInterfaceWrapper) GetCartCartId(c *gin.Context) {

	var err error

	// ------------- Path parameter "cart_id" -------------
	var cartId string

	err = runtime.BindStyledParameterWithOptions("simple", "cart_id", c.Param("cart_id"), &cartId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cart_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCartCartId(c, cartId)
}

// PostCartCartId operation middleware
func (siw *ServerInterfaceWrapper) PostCartCartId(c *gin.Context) {

	var err error

	// ------------- Path parameter "cart_id" -------------
	var cartId string

	err = runtime.BindStyledParameterWithOptions("simple", "cart_id", c.Param("cart_id"), &cartId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cart_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCartCartId(c, cartId)
}

// DeleteCartCartIdProductId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCartCartIdProductId(c *gin.Context) {

	var err error

	// ------------- Path parameter "cart_id" -------------
	var cartId string

	err = runtime.BindStyledParameterWithOptions("simple", "cart_id", c.Param("cart_id"), &cartId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cart_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCartCartIdProductId(c, cartId, productId)
}

// PatchCartCartIdProductId operation middleware
func (siw *ServerInterfaceWrapper) PatchCartCartIdProductId(c *gin.Context) {

	var err error

	// ------------- Path parameter "cart_id" -------------
	var cartId string

	err = runtime.BindStyledParameterWithOptions("simple", "cart_id", c.Param("cart_id"), &cartId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cart_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchCartCartIdProductId(c, cartId, productId)
}

// GetCheck operation middleware
func (siw *ServerInterfaceWrapper) GetCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCheck(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/cart/new", wrapper.PostCartNew)
	router.DELETE(options.BaseURL+"/cart/:cart_id", wrapper.DeleteCartCartId)
	router.GET(options.BaseURL+"/cart/:cart_id", wrapper.GetCartCartId)
	router.POST(options.BaseURL+"/cart/:cart_id", wrapper.PostCartCartId)
	router.DELETE(options.BaseURL+"/cart/:cart_id/:product_id", wrapper.DeleteCartCartIdProductId)
	router.PATCH(options.BaseURL+"/cart/:cart_id/:product_id", wrapper.PatchCartCartIdProductId)
	router.GET(options.BaseURL+"/check", wrapper.GetCheck)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWT2/7Ngz9KgK3o5ekW0++dRswZIe2W7FDMRSFIjGJOltSJSpFEOS7D5Tz306adi26",
	"38mCTIrk4+OTFqBc7Z1FSxHKBUQ1xVrm5S8yEH99cB4DGcy7SgZ6NJqXYxdqSVBCSkZDATT3CCVECsZO",
	"YFmAIayz02bxfcAxlPBdfxu1vwrZ53hDwpo9V0fJEOQcltsNN3pCRWyxsW5l+JykJUNzXq/cjCWcYGC/",
	"uQz2tUzu2aYz6v3Kez+inElTyVGFOyFHzlUoLTv54HRSa9RaKCVr6FG5yoXjv62s8fhfH4za/W1TPeJq",
	"2xXwlrFjl40Ncca5JsFwiqvbofhB3Hi0vPqpN+gNoIAZhmichRIu8s6yAOfRSm+ghLWRlzTNWPSZIH2L",
	"LxkmFzOFGCxJxtmhhhJuXSSOd40vUEDA54SRfnY6d0w5S2izl/S+Mir79Z+is1t+ntnAZXO6CaihpJAw",
	"b0TvbGwa9+Pg4k0x3zsK3Y3QGFUwnhpwcwdUQEmoRUxKYYzjVFUN/2OqaxnmbJdNopDC4ovgHDienEQo",
	"/25m9oEdmj4sVjkuOUmNFRK2+/Fr3mfXPFQ6tzPIGgkDn7oAwwlyi6GAhoqb4g8hLnbgOkThoQX/ZZNX",
	"G4cKZXgFBzYRNMUjGBQwwQ7y/YZ0qtKOXHKRn4bA4MNIn+vuINbvdzfXIiupcGPB+hcPoPwTKQUbhUoh",
	"oCXB4xOFsUeRPT3XX4ntt6Ml58XcxyxLtdS6NRkFXDZM2rcf2pmsjBbG+kQHTb/SmkUkH0nuxCC1xaS/",
	"2F5pb1KW28btC8hRdIrYzs384TqWgQ1Yu1lnt455WEdi7JLVrRnlk4SzKPg1xdN5Svu8JDXtGFHe/p/0",
	"Yz/CKhVhNKsUl5ZfasVHt+19AnH+C7P7qn9NOgaflM1/e++2BeiPVSyRvG49VHpnMrt3QO2/8lm559lw",
	"U1C3FE1R/cMhjl7v2aAb4v207jDMjEJhogjJ2vVTbeeNwUcJ0/AxdlkvNzku1uxs7uGH5b8BAAD//25A",
	"6hdbDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
