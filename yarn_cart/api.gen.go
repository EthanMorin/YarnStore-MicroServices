// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns current Yarns in cart
	// (GET /cart)
	GetCart(c *gin.Context)
	// Adds a Yarn to the cart
	// (POST /cart)
	PostCart(c *gin.Context)
	// Remove one item in the cart
	// (DELETE /cart/{product_id})
	DeleteCartProductId(c *gin.Context, productId string)
	// Update the Yarn quantity
	// (PATCH /cart/{product_id})
	PatchCartProductId(c *gin.Context, productId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetCart operation middleware
func (siw *ServerInterfaceWrapper) GetCart(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCart(c)
}

// PostCart operation middleware
func (siw *ServerInterfaceWrapper) PostCart(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCart(c)
}

// DeleteCartProductId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCartProductId(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCartProductId(c, productId)
}

// PatchCartProductId operation middleware
func (siw *ServerInterfaceWrapper) PatchCartProductId(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchCartProductId(c, productId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/cart", wrapper.GetCart)
	router.POST(options.BaseURL+"/cart", wrapper.PostCart)
	router.DELETE(options.BaseURL+"/cart/:product_id", wrapper.DeleteCartProductId)
	router.PATCH(options.BaseURL+"/cart/:product_id", wrapper.PatchCartProductId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVX4vjNhD/KkLto2Nnrwc9/HbtQUkfutuWPhxlWRRp4uiwNTppFDYEf/cysrNJ7IQt",
	"bRf6JKH5/5vfjA5SY+fRgaMo64OMegudytcfVSA+fUAPgSzkV0vQXV4u5V+TcmRpz3fae5C1tI6ggSD7",
	"Qu5VcCz5NsBG1vKb6hS9GkNXn1mn74ujOa6/gCZ5elAhqP11jc+j/8uc1E7ZVq1bOEtqjdiCcmzkA5qk",
	"6cmaM3mkYF0jC/m8aHBhO48jGoq2spYNlh26Bs26xNBU+b4wwe4gVOuIrvLBdpbsDjhC9jE6fhGU9znt",
	"1accBJW3C40GGnALeKagFqSanD77k7V8sqbAjmH3NJSfnKUnjS2GeeJHsVMd3Jb6YPW52KVuzZ2aY8tP",
	"1m0wK1tiLDPagmkiPj6sxELce3B8+65clktZyB2EaHPud/mlLyR6cMpbWcujEgOay6z0SLgG8sEdVGTR",
	"rYys5U9AmZCFDBA9uji09t1yyYdGR+CymfK+tTobVl8yckdWv0a87D8XaiDqYD0Nyf/8+/0vIpNO4EYw",
	"hWNGKKauU2Eva/kbUAouCp1CAEeCgYnCOqGHlIdO/jmM1CNTDuOVGh8wnor8miDSD2j2/1l942D1g3cb",
	"wMiaQoJ+hundG8S8xDRTRxkDRsSkNcS4SW27Z4q8H1p6qb9yO9VaI6zziSbofzQmCpVBF4SCtnAD974Y",
	"SFYdTiPfD7FaIJg35FN+Z+uHwWBlMmOD6oAgsO9poqOisIbJwrnkncfDw8PP26OQw1CeL55pT4ozfCej",
	"2z/O+vV+DlhGI0CHu6sQ37JwSGKDyZkZw9mTQAeCNxBz+zbOeaj19grB+fl/Cec/m7bJN9NhGqymH9/1",
	"dfraFC7/RS5v9w3PZ/nXMZZI3iia0K38m3wrJ4T7I/vKHc+KLwXNp5rtIOyOBEqh5R/n3ff8wZR39Yfl",
	"h6XkLo92hyNfhn3/2P8VAAD//9jOLHIECQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
