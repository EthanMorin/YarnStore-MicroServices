name: yarn_store
services:
  # Catalog Service
  catalog:
    build: ./yarn_catalog
    ports:
      - "8080"
    restart: always
    depends_on:
      - mongo
      - consul
      - traefik
    networks:
      - yarn_exchange
    deploy:
      replicas: 5

  # Cart Service
  cart:
    build: ./yarn_cart
    ports:
      - "8080"
    restart: always
    depends_on:
      - consul
      - traefik
      - cache
    networks:
      - yarn_exchange
    deploy:
      replicas: 5

  # Email Service
  email:
    build: ./yarn_email
    restart: always
    depends_on:
      - rabbitmq
    networks:
      - yarn_exchange
    deploy:
      replicas: 5

  # Order Service
  # orders:
  #   build: ./yarn_orders
  #   restart: always
  #   ports:
  #     - "8080"
  #   depends_on:
  #     - consul
  #     - traefik
  #     - rabbitmq
  #   networks:
  #     - yarn_exchange
  #   deploy:
  #     replicas: 5


  # Service Registry
  consul:
    image: hashicorp/consul:latest
    container_name: consul
    restart: always
    ports:
      - "8500:8500"
    networks:
      - yarn_exchange
    volumes:
      - ./consul/consul.json:/consul/config/consul.json

  # Gateway
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: always
    ports:
      - "80:80"
      - "8080:8080"
    networks:
      - yarn_exchange
    depends_on:
      - consul
    volumes:
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - /var/run/docker.sock:/var/run/docker.sock

  # DataBases
  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    restart: always
    networks:
      - yarn_exchange

  # mongo:
  #   image: mongo:latest
  #   command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
  #   ports:
  #     - 27017:27017
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   healthcheck:
  #     test: test $$(echo "rs.initiate({_id:'my-replica-set',members:[{_id:0,host:\"mongo:27017\"},{_id:1,host:\"mongo1:27018\"},{_id:2,host:\"mongo2:27019\"}]}).ok || rs.status().ok" | mongo --port 27017 --quiet) -eq 1
  #     interval: 10s
  #     start_period: 30s
  #   volumes:
  #     - "mongodb_data:/data/db"
  #   networks:
  #     - yarn_exchange

  # mongo1:
  #   image: mongo:latest
  #   command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
  #   ports:
  #     - 27018:27018
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   volumes:
  #     - "mongodb1_data:/data/db"
  #   networks:
  #     - yarn_exchange

  # mongo2:
  #   image: mongo:latest
  #   command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
  #   ports:
  #     - 27019:27019
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   volumes:
  #     - "mongodb2_data:/data/db"
  #   networks:
  #     - yarn_exchange

  cache:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_cache:/data
    networks:
      - yarn_exchange

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbit_data:/var/lib/rabbitmq/
      - rabbit_log:/var/log/rabbitmq
    networks:
      - yarn_exchange

volumes:
  redis_cache: {}
  rabbit_data: {}
  rabbit_log: {}

  mongodb_data:
  mongodb1_data:
  mongodb2_data:
networks:
  yarn_exchange:
    driver: bridge
