// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// returns the catalog of all Yarns
	// (GET /catalog)
	GetCatalog(c *gin.Context)
	// Adds a Yarn to the catalog
	// (POST /catalog)
	PostCatalog(c *gin.Context)
	// Check if the service is running
	// (GET /catalog/check)
	GetCatalogCheck(c *gin.Context)
	// Delete one item in the catalog
	// (DELETE /catalog/{product_id})
	DeleteCatalogProductId(c *gin.Context, productId string)
	// gets one yarn from the catalog
	// (GET /catalog/{product_id})
	GetCatalogProductId(c *gin.Context, productId string)
	// Update the Yarn availability
	// (PATCH /catalog/{product_id})
	PatchCatalogProductId(c *gin.Context, productId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetCatalog operation middleware
func (siw *ServerInterfaceWrapper) GetCatalog(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCatalog(c)
}

// PostCatalog operation middleware
func (siw *ServerInterfaceWrapper) PostCatalog(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostCatalog(c)
}

// GetCatalogCheck operation middleware
func (siw *ServerInterfaceWrapper) GetCatalogCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCatalogCheck(c)
}

// DeleteCatalogProductId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCatalogProductId(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteCatalogProductId(c, productId)
}

// GetCatalogProductId operation middleware
func (siw *ServerInterfaceWrapper) GetCatalogProductId(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCatalogProductId(c, productId)
}

// PatchCatalogProductId operation middleware
func (siw *ServerInterfaceWrapper) PatchCatalogProductId(c *gin.Context) {

	var err error

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "product_id", c.Param("product_id"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter product_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchCatalogProductId(c, productId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/catalog", wrapper.GetCatalog)
	router.POST(options.BaseURL+"/catalog", wrapper.PostCatalog)
	router.GET(options.BaseURL+"/catalog/check", wrapper.GetCatalogCheck)
	router.DELETE(options.BaseURL+"/catalog/:product_id", wrapper.DeleteCatalogProductId)
	router.GET(options.BaseURL+"/catalog/:product_id", wrapper.GetCatalogProductId)
	router.PATCH(options.BaseURL+"/catalog/:product_id", wrapper.PatchCatalogProductId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWTW8bNxD9KwTb40qrtDntLU2AQj3UBoIegsIwKHK0YrrLYYezQgRh/3vBWX1rBTtF",
	"bPhkmhwOZ95781ZbbbGNGCBw0tVWJ7uC1sjyo2HTYJ2XkTACsQc58Azt+eJngqWu9E/lMVm5y1R+MRR0",
	"X2jeRNCVNkRmo/vjBi6+guUcIZFXr5m18Y1ZNJD/2d1ZIDZgJG0kdJ3lR+9OzhOTD7Uu9LdJjRPfRiSW",
	"zIZXutI1TlsMNbrFFKkuZT1x5NdA5SJhKCP51rNfQ35BcuwSHw6md1L2/JM8gib6iUUHNYQJfGMyEza1",
	"lJ/z6Uo/eldgmwGLPLTfBc+PFhuk68L3x8G0cPs0krenx6FrF0Bj2OYtH5YowZ4zloK22nGsPtzP1UTd",
	"RQh59et0Np3pQq+Bkpfy38lOX2iMEEz0utL7oIypdFrao2BqELwzj4Y9hrnTlf4deK+pQhOkiCENHP8y",
	"m+U/FgNDkJsmxsZbuVt+FQj32nxKb/snpGkHyZKPPHTxx+e7P5UIUOFSbQyFJGilrm0NbXSlCbijkBSv",
	"QO3ayaGmadQXCS/0QOzfh/F4yCLENNLvPaazhv/tIPFv6Dbf1et3TcNriyo35Qmcrpg66K9offfDaB1s",
	"5JpTkbFxDpxKnbWQ0rJrmk3u5/2gqvP4eVibxjvlQ+z4gv0PziVlhGnFeCqCUd774qD50q7A/vMM5X+U",
	"uHH5nxf6GWjtLSifFHUhCEdn1Uoq5ZdSZxqPPtS3PfpkP7zVAMN1pZ9kf1fs/XBn7mTMybTAQBmEy1p3",
	"gcq7PC25njxcOptONs3suoUedHdq2Jf6KU60cKHO/uEKs/fXmAlzBC2uR+Vw60ZAVkvsgrtAeABDYQCV",
	"nVv58KQmiqcE8LYxnb34vIoHDxayN+Gb5Mwz6LfIqYGTUJNTqCVh+wxyomG7GnHqvP1WCXrxz8b/s/bZ",
	"61h7F53hi2mePnOcpxeS+UtyCVXDZ2NAxTeeN+MO3x92t3sqD78vHvr/AgAA//+3Se1mPQsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
